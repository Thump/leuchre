#!/usr/bin/python3

import time
import logging
import sys
import select

from optparse import OptionParser
from euchred import Euchred
from card import Card
from logging import warning as warn, log, debug, info, error, critical


###########################################################################
# parse our options

parser = OptionParser()
parser.add_option("-q", "--quiet",
                  dest="quiet",
                  default=False,
                  action="store_true",
                  help="don't print anything to stdout")
(options, args) = parser.parse_args()


###########################################################################
# set up logging

# we have two types of formatters: one for the file (with more detailed
# timing and message levels) and a more compact one for stdout
fhfmt = logging.Formatter(
    fmt="%(asctime)s.%(msecs)03d :: %(levelname)s :: %(message)s",
    datefmt='%Y-%m-%d %H:%M:%S')
chfmt = logging.Formatter(
    fmt="%(asctime)s :: %(message)s",
    datefmt='%Y-%m-%d %H:%M:%S')

# get the root logger
logger = logging.getLogger('')
logger.setLevel(logging.DEBUG)

# make a console handler and add it, if quiet isn't enabled
if not options.quiet:
    ch = logging.StreamHandler(sys.stdout)
    ch.setFormatter(chfmt)
    logger.addHandler(ch)

# make the logfile handler and add it
fh = logging.FileHandler("leuchre.log",mode="w+")
fh.setFormatter(fhfmt)
logger.addHandler(fh)


###########################################################################
# mainline

info("This is leuchre")

p0 = Euchred(server="127.0.0.1", port=1234, name="p0")
info("joining server %s on port %d",p0.server,p0.port)
p0.join()

p1 = Euchred(server="127.0.0.1", port=1234, name="p1")
info("joining server %s on port %d",p1.server,p1.port)
p1.join()

p2 = Euchred(server="127.0.0.1", port=1234, name="p2")
info("joining server %s on port %d",p2.server,p2.port)
p2.join()

p3 = Euchred(server="127.0.0.1", port=1234, name="p3")
info("joining server %s on port %d",p3.server,p3.port)
p3.join()

# now we loop to handle events from the server
inputs = [ p0.s , p1.s , p2.s , p3.s ]

# loop while we still have valid inputs (actually, since we never modify
# the inputs array, we just loop forever)
while inputs:
    readable, writable, exceptional = select.select(inputs, [], inputs)

    # loop across each readable socket
    for s in readable:
        if s is p0.s:
            info("")
            info("got data from server for p0")
            p0.parseMessage()
            p0.status()
        if s is p1.s:
            info("")
            info("got data from server for p1")
            p1.parseMessage()
            p1.status()
        if s is p2.s:
            info("")
            info("got data from server for p2")
            p2.parseMessage()
            p2.status()
        if s is p3.s:
            info("")
            info("got data from server for p3")
            p3.parseMessage()
            p3.status()

# we shouldn't ever get here, but just in case
info("sleeping...")
time.sleep(10000)

