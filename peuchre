#!/usr/bin/python3

import time
import logging
import sys
import select

from optparse import OptionParser
from euchreclient import EuchreClient
from card import Card
from logging import warning as warn, log, debug, info, error, critical


###########################################################################
# This returns true if all 4 players are in joined state, false otherwise
#
def allJoined():
    # default to true
    state = False

    # if any player has not joined, set to false
    if     'state' in p0.state[0] and p0.state[0]['state'] == 2 \
       and 'state' in p0.state[1] and p0.state[1]['state'] == 2 \
       and 'state' in p0.state[2] and p0.state[2]['state'] == 2 \
       and 'state' in p0.state[3] and p0.state[3]['state'] == 2:
        state = True

    return state


###########################################################################
# This sends a start message to begin the game: it figures out who the
# creator is and sends a message as that person
#
def sendStart():
    # figure out the creator
    if p0.state[0]['creator'] == 1:
        # send start message
        info("game: p0 is the creator")
        p0.sendStart()
    if p1.state[1]['creator'] == 1:
        # send start message
        info("game: p1 is the creator")
        p1.sendStart()
    if p2.state[2]['creator'] == 1:
        # send start message
        info("game: p2 is the creator")
        p2.sendStart()
    if p3.state[3]['creator'] == 1:
        # send start message
        info("game: p3 is the creator")
        p3.sendStart()


###########################################################################
# This will determine who has an order offer, and allow that player to
# order or pass (by calling the relevant routine for that player).  It uses
# an array to track ordering, since it's possible that between ordering
# or passing, we can receive multiple messages, and consequently order or
# pass multiple times
#
def sendOrderPass():
    # default player to NUL
    player = 0

    # figure out the player with the order offer
    if p0.state[0]['orderoffer'] == 1:
        player = p0
        if 0 in ordered and ordered[0] == 1:
            info("player 0 already ordered/passed, skipping")
            return
        ordered[0] = 1
    if p1.state[1]['orderoffer'] == 1:
        player = p1
        if 1 in ordered and ordered[1] == 1:
            info("player 1 already ordered/passed, skipping")
            return
        ordered[1] = 1
    if p2.state[2]['orderoffer'] == 1:
        player = p2
        if 2 in ordered and ordered[2] == 1:
            info("player 2 already ordered/passed, skipping")
            return
        ordered[2] = 1
    if p3.state[3]['orderoffer'] == 1:
        player = p3
        if 3 in ordered and ordered[3] == 1:
            info("player 3 already ordered/passed, skipping")
            return
        ordered[3] = 1

    # if player isn't set, then no player has an order offer, weird
    if player == 0:
        info("no player has an order offer")
        return

    info("player " + player.name + " is ordering")
    player.sendOrderPass()


###########################################################################
# parse our options

parser = OptionParser()
parser.add_option("-q", "--quiet",
                  dest="quiet",
                  default=False,
                  action="store_true",
                  help="don't print anything to stdout")
(options, args) = parser.parse_args()


###########################################################################
# set up logging

# we have two types of formatters: one for the file (with more detailed
# timing and message levels) and a more compact one for stdout
fhfmt = logging.Formatter(
    fmt="%(asctime)s.%(msecs)03d :: %(levelname)s :: %(message)s",
    datefmt='%Y-%m-%d %H:%M:%S')
chfmt = logging.Formatter(
    fmt="%(asctime)s :: %(message)s",
    datefmt='%Y-%m-%d %H:%M:%S')

# get the root logger
logger = logging.getLogger('')
logger.setLevel(logging.DEBUG)

# make a console handler and add it, if quiet isn't enabled
if not options.quiet:
    ch = logging.StreamHandler(sys.stdout)
    ch.setFormatter(chfmt)
    logger.addHandler(ch)

# make the logfile handler and add it
fh = logging.FileHandler("peuchre.log",mode="a+")
fh.setFormatter(fhfmt)
logger.addHandler(fh)


###########################################################################
# some other initialization

# we track whether we've sent a start message or not
started = 0

# we track whether a player has ordered or not
ordered = {}

###########################################################################
# mainline

info("This is peuchre")

p0 = EuchreClient(server="127.0.0.1", port=1234, name="p0")
p0.sendJoin()

p1 = EuchreClient(server="127.0.0.1", port=1234, name="p1")
p1.sendJoin()

p2 = EuchreClient(server="127.0.0.1", port=1234, name="p2")
p2.sendJoin()

p3 = EuchreClient(server="127.0.0.1", port=1234, name="p3")
p3.sendJoin()

# now we loop to handle events from the server
inputs = [ p0.s , p1.s , p2.s , p3.s ]

# loop while we still have valid inputs (actually, since we never modify
# the inputs array, we just loop forever)
while inputs:
    readable, writable, exceptional = select.select(inputs, [], inputs)

    #if   p0.s in readable: p0.parseMessage()
    #elif p1.s in readable: p1.parseMessage()
    #elif p2.s in readable: p2.parseMessage()
    #elif p3.s in readable: p3.parseMessage()

    # loop across each readable socket
    for s in readable:
        if s is p0.s:
            p0.parseMessage()
        if s is p1.s:
            p1.parseMessage()
        if s is p2.s:
            p2.parseMessage()
        if s is p3.s:
            p3.parseMessage()

    # each time through, we drive game state forward by checking to see
    # the current hand state
    #  - if pregame (0), and all players joined, send start
    #  - if hole (1), then someone has an option to order the hole card
    #  - if trump (2), then someone has an option to call trump
    #  - if defend (3), then someone has an option to defend alone
    #  - if play (4), then someone has an option to play
    # 
    # the game state is sent to all players, but it should be the same
    # for them all, so we check it against player 0, but it would work
    # to check it against any other player too
    if allJoined():
        # this sends the start message: let the games begin!
        if p0.state['hstate'] == 0 and started != 1:
            info("")
            info("game: everyone is joined, sending start %d" % (started))
            sendStart()
            started = 1
