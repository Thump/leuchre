#!/usr/bin/python3

import time
import logging
import sys
import select

import threading
from game import Game
from threading import Lock

from optparse import OptionParser
from logging import warning as warn, log, debug, info, error, critical

from record import Record


###########################################################################
# parse our options

parser = OptionParser()

# add an option to specify the euchred server
parser.add_option("-s", "--server",
                  dest="server",
                  default="127.0.0.1",
                  action="store",
                  help="name of the euchred server to contact")

# add an option to specify the euchred port
parser.add_option("-p", "--port",
                  type="int",
                  dest="port",
                  default=1234,
                  action="store",
                  help="port of the euchred server to contact")

# add an option to reduce the chatty-ness of the logs: this doesn't do very
# much as yet
parser.add_option("-q", "--quiet",
                  dest="quiet",
                  default=False,
                  action="store_true",
                  help="don't print anything to stdout")

# add an option to enable stats output: this shows a live view of the data
# being gathered; this automatically implies -q
parser.add_option("--stats",
                  dest="stats",
                  default=False,
                  action="store_true",
                  help="show live stats, implies --quiet")

# add an option to override the timeout logic: by default the server will
# terminate if there is more than 30s of idle from the server, but this
# can interfere with manual client play
parser.add_option("--notimeout",
                  dest="timeout",
                  default=30,
                  const=999999,
                  action="store_const",
                  help="disable server timeout, allows for manual clients")

# add an option to set the team 0 class name: if we don't have a class name,
# we default to the random player
parser.add_option("-1", "--team1",
                  dest="team1",
                  default='random0',
                  help="set the class name for Team 0 players")

# add an option to set the team 1 class name: if we don't have a class name,
# we default to the random player
parser.add_option("-2", "--team2",
                  dest="team2",
                  default='random0',
                  help="set the class name for Team 1 players")

# add an option to set the number of games to play, default to a large value
parser.add_option("-n", "--numgames",
                  type="int",
                  dest="numgames",
                  default=999999999,
                  help="set the number of games to loop for")

# add an option to set the number of threads to run in parallel
parser.add_option("-t", "--numthreads",
                  type="int",
                  dest="numthreads",
                  default=25,
                  help="set the number of threads to run in parallel")

(options, args) = parser.parse_args()


###########################################################################
# set up logging

# we have two types of formatters: one for the file (with more detailed
# timing and message levels) and a more compact one for stdout
fhfmt = logging.Formatter(
    fmt="%(asctime)s.%(msecs)03d :: %(message)s",
    datefmt='%Y-%m-%d %H:%M:%S')
chfmt = logging.Formatter(
    fmt="%(asctime)s :: %(message)s",
    datefmt='%Y-%m-%d %H:%M:%S')

# get the root logger
logger = logging.getLogger('')
logger.setLevel(logging.INFO)

# make a console handler and add it, if neither quiet nor stats are enabled
if not options.quiet and not options.stats:
    ch = logging.StreamHandler(sys.stdout)
    ch.setFormatter(chfmt)
    logger.addHandler(ch)

# make the logfile handler and add it
fh = logging.FileHandler("peuchre.log",mode="a+")
fh.setFormatter(fhfmt)
logger.addHandler(fh)


###########################################################################
# mainline

info("This is peuchre")

# create a Record object: we'll pass this to the clients and they'll use
# it to record data about their hands; we provide the name of the team
# algorithms so Record can include it in the status output
record = Record(
    team1=options.team1,
    team2=options.team2,
    stats=options.stats,
)

# create a lock structure: we'll use this to control access to the record
# object by the multiple game threads
lock = threading.Lock()

# use the options.team[12] strings to create our team classes: it does this
# by directly calling __import__, using the options.team[12] strings to
# specify the file name, and expecting to see a class name of Player inside
# each file
Team1 = __import__(options.team1, globals(), locals(), ['Player'], 0).Player
Team2 = __import__(options.team2, globals(), locals(), ['Player'], 0).Player

# ok, I know Python is supposed to be EFAP, but I think it's a better idea
# to check that the player classes are providing the necessary methods
# before, since we can handle it more gracefully once
try:
    callable(Team1.decideOrderPass)
    callable(Team1.decideCallPass)
    callable(Team1.decideDrop)
    callable(Team1.decideDefend)
    callable(Team1.decidePlayLead)
    callable(Team1.decidePlayFollow)
except AttributeError:
    info("")
    error("Hmm, the Team1 class ('%s') isn't providing all"
        % (options.team1))
    error("the necessary methods:")
    for method in ("decideOrderPass()","decideCallPass","decideDrop()",
        "decideDefend()","decidePlayLead()","decidePlayFollow()"):
        info(method)

try:
    callable(Team2.decideOrderPass)
    callable(Team2.decideCallPass)
    callable(Team2.decideDrop)
    callable(Team2.decideDefend)
    callable(Team2.decidePlayLead)
    callable(Team2.decidePlayFollow)
except AttributeError:
    info("")
    error("Hmm, the Team2 class ('%s') isn't providing all"
        % (options.team2))
    error("the necessary methods:")
    for method in ("decideOrderPass()","decideCallPass()","decideDrop()",
        "decideDefend()","decidePlayLead()","decidePlayFollow()"):
        info(method)

# gcount counts the number of games underway: once this reaches
# options.numgames, we don't start any more games
gcount = 0

# determine the number of threads: it's the min of the number of games or
# the number of threads; then initialize the threads array for later use
numthreads = min(options.numgames,options.numthreads)
threads = [None]*numthreads

# this tracks the last time we printed our stats
lastprint = 0

try:
    # loop forever until we've started all expected games
    while gcount < options.numgames:
        # loop across all possible thread slots
        for i in range(0,numthreads):
            # if we still need to run more games
            if gcount < options.numgames:
                # if this slot doesn't have a thread, or has a completed
                # thread, start a new game in it
                if (type(threads[i]) is not Game) or \
                   (not threads[i].is_alive()):
                    info("server: starting thread[%d]" % (i))
                    threads[i] = Game(
                        id=i, gcount=gcount, lock=lock,
                        stats=options.stats, record=record,
                        team1=Team1, team2=Team2,
                        timeout=options.timeout )
                    threads[i].start()
                    gcount += 1

        # if we're printing stats, and we're 10s past the last time, print
        if options.stats and time.time() > lastprint+10:
            record.print()
            lastprint = time.time()

        # we don't want to tight loop, so sleep for a bit
        time.sleep(1)

    # if we get here, we've started all the games, so wait for them to finish
    for thread in threads:
        thread.join()

# means we've been interrupted with ^C: handle it and fall through
# to the final write methods
except KeyboardInterrupt:
    print("interrupted")

# do a final print() (just for pretty-ness) and a final forced write
if options.quiet:
    print("")
    record.print(clear=False)
record.writeForce()
