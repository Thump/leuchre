#!/usr/bin/python3

import time
import logging
import sys
import select

from optparse import OptionParser
from euchreclient import EuchreClient
from card import Card
from logging import warning as warn, log, debug, info, error, critical


###########################################################################
# This returns true if all 4 players are in joined state, false otherwise
#
def allJoined():
    # default to true
    state = True

    # if any player has not joined, set to false
    for player in players:
        if 'state' not in player.state or player.state['state'] != 2:
            state = False

    return state


###########################################################################
# This sends a start message to begin the game: it figures out who the
# creator is and sends a message as that person
#
def sendStart():
    # figure out the creator
    for player in players:
        if player.state['creator'] == 1:
            player.sendStart()
            return


###########################################################################
# parse our options

parser = OptionParser()
parser.add_option("-q", "--quiet",
                  dest="quiet",
                  default=False,
                  action="store_true",
                  help="don't print anything to stdout")
(options, args) = parser.parse_args()


###########################################################################
# set up logging

# we have two types of formatters: one for the file (with more detailed
# timing and message levels) and a more compact one for stdout
fhfmt = logging.Formatter(
    fmt="%(asctime)s.%(msecs)03d :: %(levelname)s :: %(message)s",
    datefmt='%Y-%m-%d %H:%M:%S')
chfmt = logging.Formatter(
    fmt="%(asctime)s :: %(message)s",
    datefmt='%Y-%m-%d %H:%M:%S')

# get the root logger
logger = logging.getLogger('')
logger.setLevel(logging.DEBUG)

# make a console handler and add it, if quiet isn't enabled
if not options.quiet:
    ch = logging.StreamHandler(sys.stdout)
    ch.setFormatter(chfmt)
    logger.addHandler(ch)

# make the logfile handler and add it
fh = logging.FileHandler("peuchre.log",mode="a+")
fh.setFormatter(fhfmt)
logger.addHandler(fh)


###########################################################################
# some other initialization

# we track whether we've sent a start message or not
started = 0

# this will be the list of active sockets to run select on
inputs = []
players = []

###########################################################################
# mainline

info("This is peuchre")

# add up to 4 clients: sendJoin() will return false if we fail to join,
# so we can use its return value to determine if we should add that client
# to the list of players, and add its socket to the inputs list to be
# monitored by select() later
for p in (0,1,2,3):
    player = EuchreClient(server="127.0.0.1", port=1234, name="p%d"%(p))
    if player.sendJoin():
        players.append(player)
        inputs.append(player.s)

# loop across our client sockets checking for input to process
while inputs:
    readable, writable, exceptional = select.select(inputs, [], inputs)

    # loop across each readable socket
    for player in players:
        if player.s in readable:
            player.parseMessage()

    # each time through, we drive game state forward by checking to see
    # the current hand state
    #  - if pregame (0), and all players joined, send start
    #  - if hole (1), then someone has an option to order the hole card
    #  - if trump (2), then someone has an option to call trump
    #  - if defend (3), then someone has an option to defend alone
    #  - if play (4), then someone has an option to play
    # 
    # the game state is sent to all players, but it should be the same
    # for them all, so we check it against player 0, but it would work
    # to check it against any other player too
    if allJoined():
        # this sends the start message: let the games begin!
        if players[0].state['hstate'] == 0 and started != 1:
            info("")
            info("game: everyone is joined, sending start %d" % (started))
            sendStart()
            started = 1
